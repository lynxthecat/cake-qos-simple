#!/bin/sh /etc/rc.common

# cake-qos-simple

# The principle of operation of cake-qos-simple is as follows:

# 1) set up an intermediate functional block for use with wan ingress (ifb-wan);
# 2) mirror packets from wan ingress to ifb-wan having restored DSCPs from the conntracks;
# 3) optionally overwrite ECN bits on upload and/or download;
# 4) set up cake on wan egress (for upload) and on ifb-wan (for download); and
# 5) set up appropriate nftables rules.

# This facilitates the optional use of the diffserv functionality in cake for improving qos when
# bandwidth is constrained by leveraging connection tracking (conntrack) in Linux.

# To make use of this optional diffserv functionality, DSCPs must be:

# a) written to packets on upload by LAN clients or route; and
# b) written to conntracks on upload for restoration on download.

# Proper operation can be evaluated using 'tcpdump -i ifb-wan -v' to inspect TOS values and by using:
# 'tc -s qdisc show dev wan' and 'tc -s qdisc show dev ifb-wan' to inspect the tinning in cake

# This service script:

# - writes out a default customizable config file;
# - writes out a default customizable nftables file;
# - creates necessary interfaces/tc calls on start/stop;
# - loads/unloads the nftables rules on start/stop; and
# - checks the nftables rules before loading.

PREFIX=/root/cake-qos-simple

START=91
STOP=4

EXTRA_COMMANDS="status upload download gen_config gen_nft_rules"
EXTRA_HELP="
cake-qos-simple custom commands:
	status			show status summary
	upload			show stats for upload interface
	download		show stats for download interface
	gen_config 		generate default config
	gen_nft_rules		generate default nftables rules based on config"


load_config()
{
	mkdir -p "${PREFIX}"

	if [[ -f "${PREFIX}/config" ]]
	then
		. "${PREFIX}/config"
	else
		printf "ERROR: no config file identified at: ${PREFIX}/config.\n"
		printf "Generate default config using 'service cake-qos-simple gen_config'.\n"
		exit
	fi
}

check_nft_rules_file()
{
	if ! [[ -f "${PREFIX}/nft.rules" ]]
	then
		printf "ERROR: No nft.rules file setup at: ${PREFIX}/nft.rules.\n"
		printf "Generate default nft.rules file using 'service cake-qos-simple gen_nft_rules'.\n"
		exit
	fi
	printf "Checking validity of nft.rules file.\n"

	if nft -c -f "${PREFIX}/nft.rules"
	then
		printf "Validity check of nft.rules file passed.\n"
	else
		printf "Validity check of nft.rules file failed.\n"
		exit
	fi
}
gen_config()
{
	printf "Generating new default config for cake-qos-simple.\n"

	mkdir -p "${PREFIX}"

	cat > "${PREFIX}/config.tmp" <<-EOT
	# cake-qos-simple configuration options

	ul_if=wan # upload interface
	dl_if=""  # download interface override (normally left blank and IFB derived for $ul_if ingress)

	cake_ul_rate_Mbps=20  # cake upload rate in Mbit/s
	cake_dl_rate_Mbps=20 # cake download rate in Mbit/s

	cake_ul_options="diffserv4 triple-isolate nat wash ack-filter noatm overhead 0"
	cake_dl_options="diffserv4 triple-isolate nat nowash ingress no-ack-filter noatm overhead 0"

	overwrite_ul_ect_0_val="" # overwrite upload ECT(1) values with decimal value (e.g. 0, 1, 2, 3), else "" to disable
	overwrite_ul_ect_1_val="" # overwrite upload ECT(0) values with decimal value (e.g. 0, 1, 2, 3), else "" to disable
	overwrite_dl_ect_0_val="" # overwrite download ECT(1) values with decimal value (e.g. 0, 1, 2, 3), else "" to disable
	overwrite_dl_ect_1_val="" # overwrite download ECT(1) values with decimal value (e.g. 0, 1, 2, 3), else "" to disable

	# the following nftables variables will be used to generate a default nft.rules file

	nft_rules_vars="# ### START OF CUSTOMISABLE NFT VARS SECTION (DO NOT DELETE THIS LINE) ###

	# correspondence between protocol, destination port and DSCPs
	# the format is: 
	# 'protocol' . 'destination port' . dscp_set_bulk OR dscp_set_besteffort OR dscp_set_video OR dscp_set_voice
	define PROTO_DPORT_DSCP_MAP = {
	        tcp . 53 : goto dscp_set_voice,  # DNS
	        udp . 53 : goto dscp_set_voice,  # DNS
	        tcp . 853 : goto dscp_set_voice, # DNS-over-TLS
	        udp . 853 : goto dscp_set_voice, # DNS-over-TLS
	        udp . 123 : goto dscp_set_voice  # NTP
	}
	
	# correspondence between protocol, destination port and DSCPs
	# the format is: 
	# 'protocol' . 'source port' . dscp_set_bulk OR dscp_set_besteffort OR dscp_set_video OR dscp_set_voice
	define PROTO_SPORT_DSCP_MAP = {
	        udp . 3074 : goto dscp_set_voice
	}

	# local MAC addresses to set to bulk (e.g. IoT devices)
	# replace MAC address below with comma separated entries
	define BULK_MACS = {
	        02:00:00:00:00:00
	}

	# ### END OF CUSTOMISABLE NFT VARS SECTION (DO NOT DELETE THIS LINE) ###" 
	EOT
	
	if [[ -f "${PREFIX}/config" ]]
	then
		printf "WARNING: config file ${PREFIX}/config already exists.\n"
		printf "Saving new config file as: '${PREFIX}/config.new'.\n"
		mv "${PREFIX}/config.tmp" "${PREFIX}/config.new"
	else
		printf "Saving new config file as: '${PREFIX}/config'.\n"
		mv "${PREFIX}/config.tmp" "${PREFIX}/config"
	fi
}

gen_nft_rules()
{
	load_config

	printf "Generating new default nft.rules file for cake-qos-simple.\n"

	mkdir -p "${PREFIX}"

	cat > "${PREFIX}/nft.rules.tmp" <<-EOT
	# cake-qos-simple nftables rules
	
	# This nft script:
	# 1) classifies DSCPs (to supplement or replace those set by LAN clients); and
	# 2) stores DSCPs in conntracks for restoration using tc action ctinfo dscp 63 128
	
	table inet cake-qos-simple
	delete table inet cake-qos-simple
	
	${nft_rules_vars}
	
	table inet cake-qos-simple {
	
	        chain hook-postrouting {
	
	                type filter hook postrouting priority mangle + 1
	
	                #  classify any new, untracked connections on WAN
	                oifname ${ul_if} ct mark & 128 == 0 goto classify-and-store-dscp
	        }
	
	        chain classify-and-store-dscp {
	
	                jump classify-dscp
	                jump store-dscp-in-conntrack
	        }
	
	        chain classify-dscp {
	
	                meta l4proto . th dport vmap @rules_proto_dport
	                meta l4proto . th sport vmap @rules_proto_sport
	
	                # IoT devices (uncomment to use)
	                ether saddr \$BULK_MACS goto dscp_set_bulk
	
	        }
	
	        map rules_proto_dport {
	                type inet_proto . inet_service : verdict
	                elements = \$PROTO_DPORT_DSCP_MAP
	        }
	        
		map rules_proto_sport {
	                type inet_proto . inet_service : verdict
	                elements = \$PROTO_SPORT_DSCP_MAP
	        }
	
	        # designate packet for cake tin: bulk
	        chain dscp_set_bulk {
	                ip dscp set cs1
	                ip6 dscp set cs1
	        }
	
	        # designate packet for cake tin: besteffort
	        chain dscp_set_besteffort {
	                ip dscp set cs0
	                ip6 dscp set cs0
	        }
	
	        # designate packet for cake tin: video
	        chain dscp_set_video {
	                ip dscp set cs2
	                ip6 dscp set cs2
	        }
	
	        # designate packet for cake tin: voice
	        chain dscp_set_voice {
	                ip dscp set cs4
	                ip6 dscp set cs4
	        }
	
	        chain store-dscp-in-conntrack {
	                ct mark set ip dscp or 128
	                ct mark set ip6 dscp or 128
	                # For older versions of nftables (OpenWrt versions prior to 23.05), replace the two lines above with:
	                # meta nfproto ipv4 ct mark set (@nh,8,8 & 252) >> 2
	                # meta nfproto ipv6 ct mark set (@nh,0,16 & 4032) >> 6
			# ct mark set ct mark or 128
	        }
	}
	EOT

	if [[ -f "${PREFIX}/nft.rules" ]]
	then
		printf "Warning: nftables rules file ${PREFIX}/nft.rules already exists.\n"
		printf "Saving new nftables rules file as: '${PREFIX}/nft.rules.new'.\n"
		mv "${PREFIX}/nft.rules.tmp" "${PREFIX}/nft.rules.new"
	else
		printf "Saving new nftables rules file as: '${PREFIX}/nft.rules'.\n"
		mv "${PREFIX}/nft.rules.tmp" "${PREFIX}/nft.rules"
	fi
}

start()
{
	check_nft_rules_file

	# call silenced stop() to remove any conflicting elements
	stop 1

	printf "\nSetting up nftables rules for cake-qos-simple using: ${PREFIX}/nft.rules.\n"
	nft -f "${PREFIX}/nft.rules"
	
	printf "\nSetting up ingress handle for interface: '${ul_if}'.\n"
	tc qdisc add dev "${ul_if}" handle ffff: ingress

	# if no dl_if specified, then create appropriate IFB and redirect ingress on $ul_if thereto
	if [[ -z "${dl_if}" ]]
	then

		printf "\nNo dl_if specified, so setting up appropriate IFB.\n"
		dl_if="ifb-${ul_if}"
		printf "\nCreating IFB device: '${dl_if}'.\n"
		ip link add name ${dl_if} type ifb
		printf "\nSetting interface: '${dl_if}' up.\n"
		ip link set "${dl_if}" up
		# For each upload interface ingress packet conditionally restore DSCP from conntrack if available and redirect to IFB
		printf "\nSetting up tc filter to restore DSCPs from conntrack on ingress packets on interface: '${ul_if}' and redirecting to IFB interface: '${dl_if}'.\n"
		tc filter add dev "${ul_if}" parent ffff: protocol all matchall action ctinfo dscp 63 128 mirred egress redirect dev "${dl_if}"

	# if $dl_if specified, then skip IFB creation
	else
		# for each upload interface ingress packet conditionally restore DSCP from conntrack if available
		printf "\nSetting up tc filter to restore DSCPs from conntrack on ingress packets on interface '${ul_if}'.\n"
		tc filter add dev "${ul_if}" parent ffff: protocol all matchall action ctinfo dscp 63 128
	fi

	printf "\nSetting up CAKE on interface: '${ul_if}' with bandwidth: '${cake_ul_rate_Mbps}Mbit/s' and options: '${cake_ul_options}'.\n"
	tc qdisc add dev "${ul_if}" root handle 1: cake bandwidth "${cake_ul_rate_Mbps}Mbit" ${cake_ul_options}

	printf "\nSetting up tc filter to restore DSCPs from conntrack on egress packets on interface '${ul_if}'.\n"
	tc filter add dev "${ul_if}" parent 1: protocol all matchall action ctinfo dscp 63 128 continue

	if [[ -n "${overwrite_ul_ect_1_val}" ]]
	then
		printf "\nSetting up filters to overwrite upload ECT(1) values with decimal value: '${overwrite_ul_ect_1_val}'.\n"
		tc filter add dev "${ul_if}" parent 1: protocol ip u32 match ip dsfield 1 0x3 action pedit ex munge ip dsfield set "${overwrite_ul_ect_1_val}" retain 0x3 pipe csum ip4h
		tc filter add dev "${ul_if}" parent 1: protocol ipv6 u32 match ip6 priority 1 0x3 action pedit ex munge ip6 traffic_class set "${overwrite_ul_ect_1_val}" retain 0x3
	fi

	if [[ -n "${overwrite_ul_ect_0_val}" ]]
	then
		printf "\nSetting up filters to overwrite upload ECT(0) values with decimal value: '${overwrite_ul_ect_0_val}'.\n"
		tc filter add dev "${ul_if}" parent 1: protocol ip u32 match ip dsfield 2 0x3 action pedit ex munge ip dsfield set "${overwrite_ul_ect_0_val}" retain 0x3 pipe csum ip4h
		tc filter add dev "${ul_if}" parent 1: protocol ipv6 u32 match ip6 priority 2 0x3 action pedit ex munge ip6 traffic_class set "${overwrite_ul_ect_0_val}" retain 0x3

	fi

	printf "\nSetting up CAKE on interface: '${dl_if}' with bandwidth: '${cake_dl_rate_Mbps}Mbit/s' and options: '${cake_dl_options}'.\n"
	tc qdisc add dev "${dl_if}" root handle 1: cake bandwidth "${cake_dl_rate_Mbps}Mbit" ${cake_dl_options}

	if [[ -n "${overwrite_dl_ect_1_val}" ]]
	then
		printf "\nSetting up filters to overwrite download ECT(1) values with decimal value: '${overwrite_dl_ect_1_val}'.\n"
		tc filter add dev "${dl_if}" parent 1: protocol ip u32 match ip dsfield 1 0x3 action pedit ex munge ip dsfield set "${overwrite_dl_ect_1_val}" retain 0x3 pipe csum ip4h
		tc filter add dev "${dl_if}" parent 1: protocol ipv6 u32 match ip6 priority 1 0x3 action pedit ex munge ip6 traffic_class set "${overwrite_dl_ect_1_val}" retain 0x3
	fi
	
	if [[ -n "${overwrite_dl_ect_0_val}" ]]
	then
		printf "\nSetting up filters to overwrite download ECT(1) values with decimal value: '${overwrite_dl_ect_0_val}'.\n"
		tc filter add dev "${dl_if}" parent 1: protocol ip u32 match ip dsfield 2 0x3 action pedit ex munge ip dsfield set "${overwrite_dl_ect_0_val}" retain 0x3 pipe csum ip4h
		tc filter add dev "${dl_if}" parent 1: protocol ipv6 u32 match ip6 priority 2 0x3 action pedit ex munge ip6 traffic_class set "${overwrite_dl_ect_0_val}" retain 0x3
	fi

	printf "\nStarted cake-qos-simple.\n"
	logger -t cake-qos-simple "Started cake-qos-simple."
}

stop()
{
	silence="${1:-0}" # set to 1 to redirect stdout and stderr to /dev/null for duration of function

	[[ "${silence}" == "1" ]] && exec 3>&1 4>&2 1> /dev/null 2> /dev/null

	printf "Removing ingress handle for interface: '${ul_if}'.\n"
	tc qdisc del dev "${ul_if}" ingress
	printf "\nRemoving CAKE on interface: '${ul_if}'.\n"
	tc qdisc del dev "${ul_if}" root

	if [[ -z "${dl_if}" ]]
	then
		dl_if="ifb-${ul_if}"
		printf "\nRemoving CAKE on interface: '${dl_if}'.\n"
		tc qdisc del dev "${dl_if}" root
		printf "\nSetting IFB interface: '${dl_if}' down.\n"
	        ip link set "${dl_if}" down
		printf "\nRemoving IFB interface: '${dl_if}'.\n"
		ip link del "${dl_if}"
		dl_if=""
	else
		printf "\nRemoving CAKE on: '${dl_if}'.\n"
		tc qdisc del dev "${dl_if}" root
	fi

	printf "\nRemoving nftables rules for cake-qos-simple\n"
	nft delete table inet cake-qos-simple 2>/dev/null

	printf "\nStopped cake-qos-simple.\n\n"
	[[ "${silence}" == "0" ]] && logger -t cake-qos-simple "Stopped cake-qos-simple."

	[[ "${silence}" == "1" ]] && exec 1>&3 2>&4
}

status()
{
	tc qdisc ls
}

upload()
{
	tc -s qdisc show dev "${ul_if}"
}

download()
{
	[[ -z "${dl_if}" ]] && dl_if="ifb-${ul_if}"
	tc -s qdisc show dev "${dl_if}"
}

if [[ "${action}" != "help" && "${action}" != "gen_config" ]]
then
	load_config
fi
