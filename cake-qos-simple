#!/bin/sh /etc/rc.common

# cake-qos-simple

# author: Lynx (OpenWrt forum)

# This simple shell script:
# 1) sets up an intermediate functional block for use with wan ingress (ifb-wan); and
# 2) mirrors packets from wan ingress to ifb-wan having restored DSCPs from the conntracks
# 3) optionally overwrite ECN bits on upload and/or download
# 4) sets up cake on wan egress (for upload) and on ifb-wan (for download)

# This facilitates the optional use of the diffserv functionality in cake for improving qos when
# bandwidth is contrained is contrained by leveraging the connection trability in Linux. 

# To make use of this optional diffserv functionality, DSCPs must be: 
# a) written to packets on upload by LAN clients or route; and
# b) written to conntracks on upload for restoration on download

# Proper operation can be evaluated using 'tcpdump -i ifb-wan -v' to inspect TOS values and by using
# 'tc -s qdisc show dev wan' and 'tc -s qdisc show dev ifb-wan' to inspect the tinning in cake

# cake-qos-simple configuration options:

ul_if=wan # upload interface 
dl_if=""  # download interface override (normally left blank and IFB derived for $ul_if ingress)

cake_ul_rate_Mbps=20  # cake upload rate in Mbit/s
cake_dl_rate_Mbps=20 # cake download rate in Mbit/s

cake_ul_options="diffserv4 triple-isolate nat wash ack-filter noatm overhead 0"
cake_dl_options="diffserv4 triple-isolate nat nowash ingress no-ack-filter noatm overhead 0"

overwrite_ecn_val_ul=0 # overwrite existing ecn bits with decimal value (e.g. 0, 1, 2, 3), else "" to disable
overwrite_ecn_val_dl=0 # overwrite existing ecn bits with decimal value (e.g. 0, 1, 2, 3), else "" to disable

# end of cake-qos-simple configuration options

START=91
STOP=4

EXTRA_COMMANDS="status upload download"
EXTRA_HELP="	
	cake-qos-simple custom commands:

	status		show status summary
	upload		show stats for upload interface
	download	show stats for download interface"

start() 
{
	printf "Setting up ingress handle for interface: '${ul_if}'.\n"
	tc qdisc add dev "${ul_if}" handle ffff: ingress
	
	# If no dl_if specified, then create appropriate IFB and redirect ingress on $ul_if thereto
	if [[ -z "${dl_if}" ]]
	then

		printf "\nNo dl_if specified, so setting up appropriate IFB.\n"
		dl_if="ifb-${ul_if}"
		printf "\nCreating IFB device: '${dl_if}'.\n"
		ip link add name ${dl_if} type ifb
		printf "\nSetting interface: '${dl_if}' up.\n"
		ip link set "${dl_if}" up
		# For each upload interface ingress packet conditionally restore DSCP from conntrack if available and redirect to IFB
		printf "\nSetting up tc filter to restore DSCPs from conntrack on ingress packets on interface: '${ul_if}' and redirecting to IFB interface: '${dl_if}'.\n"
		tc filter add dev "${ul_if}" parent ffff: protocol ip matchall action ctinfo dscp 63 128 mirred egress redirect dev "${dl_if}"

	# If $dl_if specified, then skip IFB creation
	else
		# For each upload interface ingress packet conditionally restore DSCP from conntrack if available
		printf "\nSetting up tc filter to restore DSCPs from conntrack on ingress packets on interface '${ul_if}'.\n"
		tc filter add dev "${ul_if}" parent ffff: protocol ip matchall action ctinfo dscp 63 128
	fi

	printf "\nSetting up CAKE on interface: '${ul_if}' with bandwidth: '${cake_ul_rate_Mbps}Mbit/s' and options: '${cake_ul_options}'.\n"
	tc qdisc add dev "${ul_if}" root handle 1: cake bandwidth "${cake_ul_rate_Mbps}Mbit" ${cake_ul_options}

	if [[ -n "${overwrite_ecn_val_ul}" ]]
	then
		printf "\nSetting up filter to overwrite ecn bits to decimal value: '${overwrite_ecn_val_ul}' on upload.\n"
		tc filter add dev "${ul_if}" parent 1: protocol ip matchall action pedit ex munge ip dsfield set "${overwrite_ecn_val_ul}" retain 0x3
	fi

	printf "\nSetting up CAKE on interface: '${dl_if}' with bandwidth: '${cake_dl_rate_Mbps}Mbit/s' and options: '${cake_dl_options}'.\n"
	tc qdisc add dev "${dl_if}" root handle 1: cake bandwidth "${cake_dl_rate_Mbps}Mbit" ${cake_dl_options}

	if [[ -n "${overwrite_ecn_val_dl}" ]]
	then
		printf "\nSetting up filter to overwrite ecn bits to decimal value: '${overwrite_ecn_val_dl}' on download.\n"
		tc filter add dev "${dl_if}" parent 1: protocol ip matchall action pedit ex munge ip dsfield set "${overwrite_ecn_val_dl}" retain 0x3
	fi

	printf "\nStarted cake-qos-simple.\n"	
	logger -t cake-qos-simple "Started cake-qos-simple."
}

stop() 
{
	printf "Removing ingress handle for interface: '${ul_if}'.\n"
	tc qdisc del dev "${ul_if}" ingress
	printf "\nRemoving CAKE on interface: '${ul_if}'.\n"
	tc qdisc del dev "${ul_if}" root

	if [[ -z ${dl_if} ]]
	then	
		dl_if="ifb-${ul_if}"
		printf "\nRemoving CAKE on interface: '${dl_if}'.\n"
		tc qdisc del dev "${dl_if}" root
		printf "\nSetting IFB interface: '${dl_if}' down.\n"
	        ip link set "${dl_if}" down
		printf "\nRemoving IFB interface: '${dl_if}'.\n"
		ip link del "${dl_if}"
		dl_if=""
	else 
		printf "\nRemoving CAKE on: '${dl_if}'.\n"
		tc qdisc del dev "${dl_if}" root
	fi

	printf "\nStopped cake-qos-simple.\n\n"
	logger -t cake-qos-simple "Stopped cake-qos-simple."
} 

status()
{
	tc qdisc ls
}

upload() 
{
	tc -s qdisc show dev ${ul_if}
}

download()
{
	[[ -z ${dl_if} ]] && dl_if=ifb-${ul_if}
	tc -s qdisc show dev ${dl_if}
}
